:EP: 00
:Title: Enhancement Proposals
:Authors:
    - Antonio Francisco <ajoaoff@gmail.com>
    - Carlos Magno <cmagnobarbosa@gmail.com>
    - Gleyberson Andrade <gleybersonandrade@gmail.com>
    - Humberto Diógenes <hdiogenes@gmail.com>
    - José Mauro Ribeiro <zemauror@gmail.com>
    - Rogério Motitsuki <rogerio@ansp.br>
:Created: 2020-05-14
:Kytos-Version: 2020.1
:Status: Draft
:Type: Standards Track


########
Abstract
########
This blueprint is proposed to clarify what a blueprint is, its purpose, list the types of blueprints, explain which sections should be included in a blueprint, the information that should be included in each topic and the workflow involving a blueprint proposal. Therefore, this blueprint is intended to work as meta blueprint.

##########
Motivation
##########
Kytos Project uses word 'blueprint' to refer to a very specific type of document that plays a very important role in development process. Anyone who is not familiar with the concept should be able to understand and start a draft blueprint using the EP0 (blueprint 00).


###################
What is a blueprint
###################
A blueprint is a document used to specify the details of any process, features and anything else that is desirable to be implemented in Kytos Project and cannot be reduced to a Github issue or a meeting to be outlined.

#########
Audience
#########
The primary audience for EPs are the core developers, as well as network engineers involved in the Kytos Project. However, other parts of the Kytos community may use the EPs to understand many aspects of the project.

#########
Rationale
#########
This meta blueprint is intended to make the contributors workflow more clear about how to write a new blueprint.

#############
Specification
#############

Workflow
**************
Every blueprint should follow the steps below in order to be finished:
 
Outline the subject
===================
The process for writing a blueprint should begin by describing a new idea, a specification to something that has been defined to be implemented. It is recommended that a single blueprint contain a single proposal. The more focused the blueprint, the more successful it tends to be. The Kytos team have the right to reject or approve any proposal. If in doubt, create an issue in the Kytos Project on Github and add a comment asking if the issue could be a blueprint.

Submitting a blueprint
======================
After creating a first blueprint by adding every necessary section (check the sections under "Sections that a blueprint should have") you are encouraged to create a pull request in Kytos repository attending the following criteria:

    - The file containing the proposal must be named "EPX.rst";

    - The file must contain a header following the template available in Blueprint Header section;

    - The file must be written in restructured text (RST) format like the other blueprints (as you can see at 'kytos/docs/blueprints').


Blueprint review
================

In the following days after you submit your pull request the Kytos team will review the document adding comments and suggestions. So it is very important that the author of the pull request pay attention to the Kytos team feedback to make the review a quick process.


Sections that a blueprint should have
*************************************

Header
======
This section must use the template available in the Blueprint Header section of this blueprint.

Abstract
========
A short (~200 word) description of the technical issue being addressed.

Motivation
==========
It should clearly explain why the blueprint is being proposed describing any technical issue that is intended to be covered by the proposal.

Rationale
=========
The rationale fleshes out the specification by describing why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other environments or scenarios.

Specification
=============
The technical specification should describe the aspects of what is being proposed.

Backwards Compatibility
=======================
All EPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The EP must explain how the author proposes to deal with these incompatibilities.

Security Implications
=====================
If there are security concerns in relation to the EP, those concerns should be explicitly written out to make sure reviewers of the EP are aware of them.

Rejected Ideas
==============
Throughout the discussion of an EP, various proposed ideas end up not being accepted. Those rejected ideas should be recorded along with the reasoning as to why they were rejected. This both helps record the thought process behind the final version of the EP as well as preventing people from bringing up the same rejected ideas again in subsequent discussions.
 
References
==========
References -- A collection of URLs used as references through the EP.

Copyright/license
=================

Types of blueprints
*******************

Standard: Describes a new feature and its implementation.

Informational: Guidelines or information for the community and developers, but does not propose a new feature.

Epic: Describes a problem and its solution.  


################
Blueprint Header
################

Every blueprint proposal should use this template to build their own header:

:EP: <\*EP number>
:Title: <EP title>
:Authors: <list of authors' names and email addrs>
:Created: <date created on, in yyyy-mm-dd format>
:Kytos-Version: <kytos version, in yyyy.v>
:Status: <Draft | Active | Accepted | Provisional | Deferred | Rejected | Withdrawn | Final | Superseded>
:Type: <Standards Track | Informational | Process>
:\**Replaces: <EP number>

\*EP number: should be fixed by Kytos team after the author submit the PR.

\**Optional field.

##########
References
##########

[1] https://www.python.org/dev/peps/pep-0001/#pep-audience

#########
Copyright
#########

This document is placed in the public domain or under the
CC0-1.0-Universal license, whichever is more permissive.
